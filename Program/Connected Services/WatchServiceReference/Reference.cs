//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace Service.WatchServiceReference {
    using System.Runtime.Serialization;
    using System;
    
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="SmartWatch", Namespace="http://schemas.datacontract.org/2004/07/WCFServices")]
    [System.SerializableAttribute()]
    public partial class SmartWatch : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private Service.WatchServiceReference.WatchSensor HeartMonitorField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int IDField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string NazivField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string ProizvajalecField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private Service.WatchServiceReference.WatchSensor SkinTempField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private bool StanjeField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public Service.WatchServiceReference.WatchSensor HeartMonitor {
            get {
                return this.HeartMonitorField;
            }
            set {
                if ((object.ReferenceEquals(this.HeartMonitorField, value) != true)) {
                    this.HeartMonitorField = value;
                    this.RaisePropertyChanged("HeartMonitor");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int ID {
            get {
                return this.IDField;
            }
            set {
                if ((this.IDField.Equals(value) != true)) {
                    this.IDField = value;
                    this.RaisePropertyChanged("ID");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Naziv {
            get {
                return this.NazivField;
            }
            set {
                if ((object.ReferenceEquals(this.NazivField, value) != true)) {
                    this.NazivField = value;
                    this.RaisePropertyChanged("Naziv");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Proizvajalec {
            get {
                return this.ProizvajalecField;
            }
            set {
                if ((object.ReferenceEquals(this.ProizvajalecField, value) != true)) {
                    this.ProizvajalecField = value;
                    this.RaisePropertyChanged("Proizvajalec");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public Service.WatchServiceReference.WatchSensor SkinTemp {
            get {
                return this.SkinTempField;
            }
            set {
                if ((object.ReferenceEquals(this.SkinTempField, value) != true)) {
                    this.SkinTempField = value;
                    this.RaisePropertyChanged("SkinTemp");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public bool Stanje {
            get {
                return this.StanjeField;
            }
            set {
                if ((this.StanjeField.Equals(value) != true)) {
                    this.StanjeField = value;
                    this.RaisePropertyChanged("Stanje");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="WatchSensor", Namespace="http://schemas.datacontract.org/2004/07/WCFServices")]
    [System.SerializableAttribute()]
    public partial class WatchSensor : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int BeatsField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int IDField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string NazivField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string ProizvajalecField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private bool StanjeField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private double TempField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int Beats {
            get {
                return this.BeatsField;
            }
            set {
                if ((this.BeatsField.Equals(value) != true)) {
                    this.BeatsField = value;
                    this.RaisePropertyChanged("Beats");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int ID {
            get {
                return this.IDField;
            }
            set {
                if ((this.IDField.Equals(value) != true)) {
                    this.IDField = value;
                    this.RaisePropertyChanged("ID");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Naziv {
            get {
                return this.NazivField;
            }
            set {
                if ((object.ReferenceEquals(this.NazivField, value) != true)) {
                    this.NazivField = value;
                    this.RaisePropertyChanged("Naziv");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Proizvajalec {
            get {
                return this.ProizvajalecField;
            }
            set {
                if ((object.ReferenceEquals(this.ProizvajalecField, value) != true)) {
                    this.ProizvajalecField = value;
                    this.RaisePropertyChanged("Proizvajalec");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public bool Stanje {
            get {
                return this.StanjeField;
            }
            set {
                if ((this.StanjeField.Equals(value) != true)) {
                    this.StanjeField = value;
                    this.RaisePropertyChanged("Stanje");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public double Temp {
            get {
                return this.TempField;
            }
            set {
                if ((this.TempField.Equals(value) != true)) {
                    this.TempField = value;
                    this.RaisePropertyChanged("Temp");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.ServiceContractAttribute(ConfigurationName="WatchServiceReference.IService2")]
    public interface IService2 {
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService2/GetData", ReplyAction="http://tempuri.org/IService2/GetDataResponse")]
        Service.WatchServiceReference.SmartWatch GetData();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService2/GetData", ReplyAction="http://tempuri.org/IService2/GetDataResponse")]
        System.Threading.Tasks.Task<Service.WatchServiceReference.SmartWatch> GetDataAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService2/GetState", ReplyAction="http://tempuri.org/IService2/GetStateResponse")]
        Service.WatchServiceReference.SmartWatch GetState();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService2/GetState", ReplyAction="http://tempuri.org/IService2/GetStateResponse")]
        System.Threading.Tasks.Task<Service.WatchServiceReference.SmartWatch> GetStateAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService2/SetState", ReplyAction="http://tempuri.org/IService2/SetStateResponse")]
        Service.WatchServiceReference.SmartWatch SetState(bool state);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService2/SetState", ReplyAction="http://tempuri.org/IService2/SetStateResponse")]
        System.Threading.Tasks.Task<Service.WatchServiceReference.SmartWatch> SetStateAsync(bool state);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService2/GetDataSensorHeartMonitor", ReplyAction="http://tempuri.org/IService2/GetDataSensorHeartMonitorResponse")]
        Service.WatchServiceReference.WatchSensor GetDataSensorHeartMonitor();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService2/GetDataSensorHeartMonitor", ReplyAction="http://tempuri.org/IService2/GetDataSensorHeartMonitorResponse")]
        System.Threading.Tasks.Task<Service.WatchServiceReference.WatchSensor> GetDataSensorHeartMonitorAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService2/GetDataSensorSkinTemp", ReplyAction="http://tempuri.org/IService2/GetDataSensorSkinTempResponse")]
        Service.WatchServiceReference.WatchSensor GetDataSensorSkinTemp();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService2/GetDataSensorSkinTemp", ReplyAction="http://tempuri.org/IService2/GetDataSensorSkinTempResponse")]
        System.Threading.Tasks.Task<Service.WatchServiceReference.WatchSensor> GetDataSensorSkinTempAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService2/RaiseBeats", ReplyAction="http://tempuri.org/IService2/RaiseBeatsResponse")]
        Service.WatchServiceReference.SmartWatch RaiseBeats();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService2/RaiseBeats", ReplyAction="http://tempuri.org/IService2/RaiseBeatsResponse")]
        System.Threading.Tasks.Task<Service.WatchServiceReference.SmartWatch> RaiseBeatsAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService2/Termometer", ReplyAction="http://tempuri.org/IService2/TermometerResponse")]
        Service.WatchServiceReference.SmartWatch Termometer();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService2/Termometer", ReplyAction="http://tempuri.org/IService2/TermometerResponse")]
        System.Threading.Tasks.Task<Service.WatchServiceReference.SmartWatch> TermometerAsync();
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface IService2Channel : Service.WatchServiceReference.IService2, System.ServiceModel.IClientChannel {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class Service2Client : System.ServiceModel.ClientBase<Service.WatchServiceReference.IService2>, Service.WatchServiceReference.IService2 {
        
        public Service2Client() {
        }
        
        public Service2Client(string endpointConfigurationName) : 
                base(endpointConfigurationName) {
        }
        
        public Service2Client(string endpointConfigurationName, string remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public Service2Client(string endpointConfigurationName, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public Service2Client(System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(binding, remoteAddress) {
        }
        
        public Service.WatchServiceReference.SmartWatch GetData() {
            return base.Channel.GetData();
        }
        
        public System.Threading.Tasks.Task<Service.WatchServiceReference.SmartWatch> GetDataAsync() {
            return base.Channel.GetDataAsync();
        }
        
        public Service.WatchServiceReference.SmartWatch GetState() {
            return base.Channel.GetState();
        }
        
        public System.Threading.Tasks.Task<Service.WatchServiceReference.SmartWatch> GetStateAsync() {
            return base.Channel.GetStateAsync();
        }
        
        public Service.WatchServiceReference.SmartWatch SetState(bool state) {
            return base.Channel.SetState(state);
        }
        
        public System.Threading.Tasks.Task<Service.WatchServiceReference.SmartWatch> SetStateAsync(bool state) {
            return base.Channel.SetStateAsync(state);
        }
        
        public Service.WatchServiceReference.WatchSensor GetDataSensorHeartMonitor() {
            return base.Channel.GetDataSensorHeartMonitor();
        }
        
        public System.Threading.Tasks.Task<Service.WatchServiceReference.WatchSensor> GetDataSensorHeartMonitorAsync() {
            return base.Channel.GetDataSensorHeartMonitorAsync();
        }
        
        public Service.WatchServiceReference.WatchSensor GetDataSensorSkinTemp() {
            return base.Channel.GetDataSensorSkinTemp();
        }
        
        public System.Threading.Tasks.Task<Service.WatchServiceReference.WatchSensor> GetDataSensorSkinTempAsync() {
            return base.Channel.GetDataSensorSkinTempAsync();
        }
        
        public Service.WatchServiceReference.SmartWatch RaiseBeats() {
            return base.Channel.RaiseBeats();
        }
        
        public System.Threading.Tasks.Task<Service.WatchServiceReference.SmartWatch> RaiseBeatsAsync() {
            return base.Channel.RaiseBeatsAsync();
        }
        
        public Service.WatchServiceReference.SmartWatch Termometer() {
            return base.Channel.Termometer();
        }
        
        public System.Threading.Tasks.Task<Service.WatchServiceReference.SmartWatch> TermometerAsync() {
            return base.Channel.TermometerAsync();
        }
    }
}
